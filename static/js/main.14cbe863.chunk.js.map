{"version":3,"sources":["movieCard.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAErB,sBAAKJ,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,4BACE,mDAAsBL,EAAMM,kBAE9B,4BACE,6CAAgBN,EAAMO,kBAExB,mBAAGN,UAAU,aAAb,SAA2BD,EAAMQ,iBCb1B,SAASC,IAAgB,IAAD,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAETF,mBAAS,IAFA,mBAE9BG,EAF8B,KAEtBC,EAFsB,KAG/BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBACFC,QAAQC,IAAI,cAFO,SAKXC,EALW,kHAKsGV,EALtG,wCAMCW,MAAMD,GANP,cAMXE,EANW,gBAOEA,EAAIC,OAPN,OAOXC,EAPW,OAQjBX,EAAUW,EAAKC,SARE,kDAUjBP,QAAQQ,MAAR,MAViB,0DAAH,sDAclB,OACE,qCACE,uBAAM1B,UAAU,OAAO2B,SAAUb,EAAjC,UACE,uBAAOc,QAAQ,QAAQ5B,UAAU,QAAjC,wBAGA,uBACEA,UAAU,QACV6B,KAAK,QACLC,KAAK,QACLC,YAAY,oBACZC,MAAOtB,EACPuB,SAAU,SAAClB,GAAD,OAAOJ,EAASI,EAAEmB,OAAOF,UAErC,wBAAQhC,UAAU,SAAS6B,KAAK,SAAhC,uBAIF,qBAAK7B,UAAU,YAAf,SACGY,EACEuB,QAAO,SAACpC,GAAD,OAAWA,EAAMG,eACxBkC,KAAI,SAACrC,GAAD,OACH,cAACD,EAAD,CAAWC,MAAOA,GAAYA,EAAMsC,YC/BjCC,MAVf,WACE,OACE,sBAAKtC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCAEA,cAACQ,EAAD,QCIS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.14cbe863.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function MovieCard({ movie }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        className=\"card--image\"\r\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n        alt={movie.title + \" poster\"}\r\n      />\r\n      <div className=\"card--content\">\r\n        <h3 className=\"card--title\">{movie.title}</h3>\r\n        <p>\r\n          <small>RELEASE DATE: {movie.release_date}</small>\r\n        </p>\r\n        <p>\r\n          <small>RATING: {movie.vote_average}</small>\r\n        </p>\r\n        <p className=\"card--desc\">{movie.overview}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\"\r\n// import { StyleSheet, Text, View } from \"react-native\";\r\nimport \"./App.css\"\r\nimport MovieCard from \"./movieCard.js\"\r\n\r\nexport default function SearchMovies() {\r\n  const [query, setQuery] = useState(\"\")\r\n  const [movies, setMovies] = useState([])\r\n  const searchMovies = async (e) => {\r\n    e.preventDefault()\r\n    console.log(\"submitting\")\r\n\r\n    try {\r\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=ffacdc26cf257d74015765cf8f2981dd&language=en-US&query=${query}&page=1&include_adult=false`\r\n      const res = await fetch(url)\r\n      const data = await res.json()\r\n      setMovies(data.results)\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className='form' onSubmit={searchMovies}>\r\n        <label htmlFor='query' className='label'>\r\n          Movie Name\r\n        </label>\r\n        <input\r\n          className='input'\r\n          type='text '\r\n          name='query'\r\n          placeholder='i.e Jurassic Park'\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        ></input>\r\n        <button className='button' type='submit'>\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className='card-list'>\r\n        {movies\r\n          .filter((movie) => movie.poster_path)\r\n          .map((movie) => (\r\n            <MovieCard movie={movie} key={movie.id} />\r\n          ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import \"./App.css\"\nimport SearchMovies from \"./SearchMovies\"\n\nfunction App() {\n  return (\n    <div className='container'>\n      <h1 className='title'>React Movie Search</h1>\n\n      <SearchMovies />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}